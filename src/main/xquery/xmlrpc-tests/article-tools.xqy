xquery version "1.0-ml";

(:~ 
    
    XML-RPC EXAMPLE SET 1:
    
    Provides a working example of the anatomy of a working XML RPC call - the payloads generated by this script will load images and articles into WordPress (from XQuery)
 
:)

(:::::::::::::::::::: GLOBAL VARIABLES :::::::::::::::)

(: These values *must* be set beforehand :)

(: Settings for March 2012 
declare variable $MAGAZINE-EDITION-ID as xs:string := "7";
declare variable $SERIES-TAXONOMY-ID as xs:string := "2";
declare variable $MAGAZINE-YEAR as xs:string := "2012";
declare variable $MAGAZINE-MONTH as xs:string := "03"; :)

(: APR 2012 
declare variable $MAGAZINE-EDITION-ID as xs:string := "10";
declare variable $SERIES-TAXONOMY-ID as xs:string := "3";
declare variable $MAGAZINE-YEAR as xs:string := "2012";
declare variable $MAGAZINE-MONTH as xs:string := "04"; :) 

(: June 2012 
declare variable $MAGAZINE-EDITION-ID as xs:string := "11";
declare variable $SERIES-TAXONOMY-ID as xs:string := "4";
declare variable $MAGAZINE-YEAR as xs:string := "2012";
declare variable $MAGAZINE-MONTH as xs:string := "06"; :) 

(: July 2012 
declare variable $MAGAZINE-EDITION-ID as xs:string := "12";
declare variable $SERIES-TAXONOMY-ID as xs:string := "5";
declare variable $MAGAZINE-YEAR as xs:string := "2012";
declare variable $MAGAZINE-MONTH as xs:string := "07"; :)

(: August 2012  
declare variable $MAGAZINE-EDITION-ID as xs:string := "13";
declare variable $SERIES-TAXONOMY-ID as xs:string := "6";
declare variable $MAGAZINE-YEAR as xs:string := "2012";
declare variable $MAGAZINE-MONTH as xs:string := "08"; :)


(: October 2012 
declare variable $MAGAZINE-EDITION-ID as xs:string := "15";
declare variable $SERIES-TAXONOMY-ID as xs:string := "7";
declare variable $MAGAZINE-YEAR as xs:string := "2012";
declare variable $MAGAZINE-MONTH as xs:string := "10"; :) 

(: November 2012 
declare variable $MAGAZINE-EDITION-ID as xs:string := "16";
declare variable $SERIES-TAXONOMY-ID as xs:string := "8";
declare variable $MAGAZINE-YEAR as xs:string := "2012";
declare variable $MAGAZINE-MONTH as xs:string := "11"; :) 

(: December 2012  
declare variable $MAGAZINE-EDITION-ID as xs:string := "17";
declare variable $SERIES-TAXONOMY-ID as xs:string := "9";
declare variable $MAGAZINE-YEAR as xs:string := "2012";
declare variable $MAGAZINE-MONTH as xs:string := "12"; :)

(: January 2013   
declare variable $MAGAZINE-EDITION-ID as xs:string := "18";
declare variable $SERIES-TAXONOMY-ID as xs:string := "10";
declare variable $MAGAZINE-YEAR as xs:string := "2013";
declare variable $MAGAZINE-MONTH as xs:string := "01"; :) 

(: February 2013  
declare variable $MAGAZINE-EDITION-ID as xs:string := "19";
declare variable $SERIES-TAXONOMY-ID as xs:string := "11";
declare variable $MAGAZINE-YEAR as xs:string := "2013";
declare variable $MAGAZINE-MONTH as xs:string := "02"; :)  

(: March 2013  
declare variable $MAGAZINE-EDITION-ID as xs:string := "20";
declare variable $SERIES-TAXONOMY-ID as xs:string := "12";
declare variable $MAGAZINE-YEAR as xs:string := "2013";
declare variable $MAGAZINE-MONTH as xs:string := "03"; :)  

(: April 2013  
declare variable $MAGAZINE-EDITION-ID as xs:string := "21";
declare variable $SERIES-TAXONOMY-ID as xs:string := "13";
declare variable $MAGAZINE-YEAR as xs:string := "2013";
declare variable $MAGAZINE-MONTH as xs:string := "04"; :) 

(: May 2013 
declare variable $MAGAZINE-EDITION-ID as xs:string := "22";
declare variable $SERIES-TAXONOMY-ID as xs:string := "14";
declare variable $MAGAZINE-YEAR as xs:string := "2013";
declare variable $MAGAZINE-MONTH as xs:string := "05"; :)   

(: June 2013 
declare variable $MAGAZINE-EDITION-ID as xs:string := "23";
declare variable $SERIES-TAXONOMY-ID as xs:string := "15";
declare variable $MAGAZINE-YEAR as xs:string := "2013";
declare variable $MAGAZINE-MONTH as xs:string := "06"; :) 

(: July 2013  
declare variable $MAGAZINE-EDITION-ID as xs:string := "24";
declare variable $SERIES-TAXONOMY-ID as xs:string := "16";
declare variable $MAGAZINE-YEAR as xs:string := "2013";
declare variable $MAGAZINE-MONTH as xs:string := "07"; :)  

(: August 2013
declare variable $MAGAZINE-EDITION-ID as xs:string := "25";
declare variable $SERIES-TAXONOMY-ID as xs:string := "17";
declare variable $MAGAZINE-YEAR as xs:string := "2013";
declare variable $MAGAZINE-MONTH as xs:string := "08"; :) 

(: October 2013
declare variable $MAGAZINE-EDITION-ID as xs:string := "26";
declare variable $SERIES-TAXONOMY-ID as xs:string := "18";
declare variable $MAGAZINE-YEAR as xs:string := "2013";
declare variable $MAGAZINE-MONTH as xs:string := "10";  :)

(: November 2013 
declare variable $MAGAZINE-EDITION-ID as xs:string := "27";
declare variable $SERIES-TAXONOMY-ID as xs:string := "19";
declare variable $MAGAZINE-YEAR as xs:string := "2013";
declare variable $MAGAZINE-MONTH as xs:string := "11"; :) 

(: December 2013  
declare variable $MAGAZINE-EDITION-ID as xs:string := "28";
declare variable $SERIES-TAXONOMY-ID as xs:string := "20";
declare variable $MAGAZINE-YEAR as xs:string := "2013";
declare variable $MAGAZINE-MONTH as xs:string := "12"; :)

(: January 2014 
declare variable $MAGAZINE-EDITION-ID as xs:string := "30";
declare variable $SERIES-TAXONOMY-ID as xs:string := "21";
declare variable $MAGAZINE-YEAR as xs:string := "2014";
declare variable $MAGAZINE-MONTH as xs:string := "01"; :) 

(: February 2014 
declare variable $MAGAZINE-EDITION-ID as xs:string := "31";
declare variable $SERIES-TAXONOMY-ID as xs:string := "22";
declare variable $MAGAZINE-YEAR as xs:string := "2014";
declare variable $MAGAZINE-MONTH as xs:string := "02"; :)   

(: March 2014 
declare variable $MAGAZINE-EDITION-ID as xs:string := "32";
declare variable $SERIES-TAXONOMY-ID as xs:string := "23";
declare variable $MAGAZINE-YEAR as xs:string := "2014";
declare variable $MAGAZINE-MONTH as xs:string := "03"; :)  

(: April 2014  
declare variable $MAGAZINE-EDITION-ID as xs:string := "33";
declare variable $SERIES-TAXONOMY-ID as xs:string := "24";
declare variable $MAGAZINE-YEAR as xs:string := "2014";
declare variable $MAGAZINE-MONTH as xs:string := "04"; :) 

(: May 2014 
declare variable $MAGAZINE-EDITION-ID as xs:string := "34";
declare variable $SERIES-TAXONOMY-ID as xs:string := "25";
declare variable $MAGAZINE-YEAR as xs:string := "2014";
declare variable $MAGAZINE-MONTH as xs:string := "05"; :)

(: June 2014  
declare variable $MAGAZINE-EDITION-ID as xs:string := "35";
declare variable $SERIES-TAXONOMY-ID as xs:string := "26";
declare variable $MAGAZINE-YEAR as xs:string := "2014";
declare variable $MAGAZINE-MONTH as xs:string := "06"; :) 

(: July 2014  
declare variable $MAGAZINE-EDITION-ID as xs:string := "36";
declare variable $SERIES-TAXONOMY-ID as xs:string := "27";
declare variable $MAGAZINE-YEAR as xs:string := "2014";
declare variable $MAGAZINE-MONTH as xs:string := "07"; :) 

declare variable $XMLRPCURI as xs:string := "http://www.yourdomain.com/wp-install-dir/xmlrpc.php";

(:::::::::::::::::::: END GLOBAL VARIABLES :::::::::::::::)

declare function local:user-credentials() {
    (<data>
        <param><value>1</value></param>
        <param><value>wp-admin</value></param>
        <param><value>yourpasswordhere</value></param>
    </data>)/* 
};

(: gets each issue id :)
declare function local:get-distinct-issue-ids() as xs:string* {
  fn:distinct-values(for $i in fn:data(//column[@name = "news_issue_id"])
  order by $i
  return string($i))
};

declare function local:get-articles-by-issue-id($id as xs:string) {
  for $i in //column[@name = "news_issue_id"]
  where fn:data($i) = $id
  order by fn:root($i)//column[@name = "news_id"]/text() cast as xs:integer ascending
  return fn:root($i)
};

declare function local:get-article-ids-by-issue-id($id as xs:string) as xs:string* {
  for $i in //column[@name = "news_issue_id"]
  where fn:data($i) = $id
  order by fn:root($i)//column[@name = "news_id"]/text() cast as xs:integer ascending
  return fn:root($i)//column[@name = "news_id"]/text()
};

declare function local:get-article-by-id($id as xs:string) {
  for $i in //column[@name = "news_id"]/text() 
  where $i = $id
  return fn:root($i)
};

declare function local:create-image-src-attr-by-article-id($id as xs:string) {
  concat("http://www.yourdomain.com/path/to/",$id,".jpg")
};

declare function local:create-image-link-by-article-id($id as xs:string) {
  element img {
    attribute src { local:create-image-src-attr-by-article-id($id) }
  }
};

declare function local:article-get-category-by-id($id as xs:string) as xs:string? { 
  let $category := for $i in //column[@name = "cat_id"]/text()
  where $i = $id
  return fn:replace(fn:root($i)//column[@name = "cat_name"]/text(),"\\","")
  let $c2 := if(fn:string-length($category) gt 1)
  then($category)
  else("Uncategorized")
  return $c2
};

declare function local:contains-alphabet-chars($arg as xs:string?) as xs:boolean 
{
    some $searchString in ("a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z") 
    satisfies contains($arg,$searchString)
};

declare function local:build-payload-for-article-image($id as xs:string, $parent-article-id as xs:string){
<methodCall>
    <methodName>wp.uploadFile</methodName>
    <params>
        {local:user-credentials()}
        <struct>
            <member>
                <name>name</name>
                <value><string>{fn:concat($MAGAZINE-YEAR,"-",$MAGAZINE-MONTH,"-article-image-", $id,".jpg")}</string></value>
            </member>
            <member>
                <name>type</name>
                <value><string>image/jpeg</string></value>
            </member>
            <member>
                <name>bits</name>
                <value><base64>{xs:base64Binary(xdmp:document-get(local:create-image-src-attr-by-article-id($id)))}</base64></value>
            </member>
            <member>
                <name>post_id</name>
                <value><int>{$parent-article-id}</int></value>
            </member>
        </struct>
    </params>
</methodCall> 
};


declare function local:build-payload-for-article-id($id as xs:string) {
  let $article := local:get-article-by-id($id)
  let $html := xdmp:tidy(fn:replace($article//column[@name = "news_detail"]/text(),"\\",""),       
    <options xmlns="xdmp:tidy">
        <word-2000>yes</word-2000>
        <wrap>0</wrap>
        <bare>yes</bare>
        <clean>yes</clean>
        <force-output>yes</force-output>
        <quiet>yes</quiet>
        <show-body-only>yes</show-body-only>
        <show-warnings>no</show-warnings>
        <hide-comments>yes</hide-comments>
    </options>)
  let $excerpt := for $i in $html//text()
                  where local:contains-alphabet-chars($i)
                  return <p>{fn:normalize-space($i)}</p>   
  return
    <methodCall>
        <methodName>wp.newPost</methodName>
        <params>
            {local:user-credentials()}
            <struct>
                <member>
                    <name>post_title</name>
                    <value>{fn:replace($article//column[@name = "news_title"]/text(),"\\","")}</value>
                </member>
                <member>
                    <name>post_content</name>
                    <value>{xdmp:quote(<div class="article-content">{( local:create-image-link-by-article-id($id), $html )}</div>)}</value>
                </member>
                <member>
                    <name>post_date</name>
                    <value><dateTime.iso8601>{fn:concat($MAGAZINE-YEAR,$MAGAZINE-MONTH,"15T09:00:00")}</dateTime.iso8601></value>
                </member>
                <member>
                    <name>post_excerpt</name>
                    <value>{xdmp:quote($excerpt[1])}</value>
                </member>
                <member>
                  <name>post_status</name>
                  <value>
                     <string>publish</string>
                  </value>
                 </member>
                 <member>
                   <name>terms_names</name>
                   <value>
                      <struct>
                         <member>
                            <name>category</name>
                            <value>
                               <array>
                                  <data>
                                     <value>
                                        <string>{local:article-get-category-by-id($article//column[@name = "news_cat_id"]/text())}</string>
                                     </value>
                                  </data>
                               </array>
                            </value>
                         </member>
                      </struct>
                   </value>
                </member>            
                <member>
                   <name>terms</name>
                   <value>
                      <struct>
                         <member>
                            <name>series</name>
                            <value>
                               <array>
                                  <data>
                                     <value>
                                        <string>{$SERIES-TAXONOMY-ID}</string>
                                     </value>
                                  </data>
                               </array>
                            </value>
                         </member>
                      </struct>
                   </value>
                </member>
            </struct>
        </params>
    </methodCall> 
};

declare function local:build-payload-for-article-thumbnail-link($artid as xs:string, $imgid as xs:string) {
    <methodCall>
        <methodName>wp.editPost</methodName>
        <params>
            {local:user-credentials()},
            <param><value>{$artid}</value></param>
            <struct>
                <member>
                    <name>post_thumbnail</name>
                    <value><int>{$imgid}</int></value>
                </member>
            </struct>
        </params>
    </methodCall> 
};

declare function local:build-delete-stub() {
 <methodCall>
    <methodName>wp.newPost</methodName>
    <params>
        {local:user-credentials()}
        <struct>
            <member>
                <name>post_title</name>
                <value>DELETE ME</value>
            </member>    
            <member>
               <name>terms</name>
               <value>
                  <struct>
                     <member>
                        <name>series</name>
                        <value>
                           <array>
                              <data>
                                 <value>
                                    <string>{$SERIES-TAXONOMY-ID}</string>
                                 </value>
                              </data>
                           </array>
                        </value>
                     </member>
                  </struct>
               </value>
            </member>
        </struct>
      </params>
</methodCall> 
};

(::::::::::::::::::::::::::::::::::::::::::::: MAIN :::::::::::::::::::::::::::::::::::::::::::)
(
    (for $x in local:get-article-ids-by-issue-id($MAGAZINE-EDITION-ID)
    return
    (: step one - upload article :)
    let $articleid := xdmp:http-post($XMLRPCURI,
            <options xmlns="xdmp:http">
                <data>{xdmp:quote(local:build-payload-for-article-id($x))}</data>
               <headers>
                 <content-type>text/xml</content-type>
               </headers>
            </options>)//methodResponse//value/string/text() 
    return                 
    (: step two - upload image :)
    let $imageid := xdmp:http-post($XMLRPCURI,
            <options xmlns="xdmp:http">
                <data>{xdmp:quote(local:build-payload-for-article-image($x, $articleid))}</data>
               <headers>
                 <content-type>text/xml</content-type>
               </headers>
            </options>)//methodResponse//member/name[. = "id"]/../value/string/text()
    return 
    (: step three - update article with image information :) 
    xdmp:http-post($XMLRPCURI,
            <options xmlns="xdmp:http">
                <data>{xdmp:quote(local:build-payload-for-article-thumbnail-link($articleid, $imageid))}</data>
               <headers>
                 <content-type>text/xml</content-type>
               </headers>
            </options>)),
    (: WP PLUGIN BUG WORKAROUND :: step four - create a delete-me stub so series ordering can be setup :)            
    xdmp:http-post($XMLRPCURI, 
        <options xmlns="xdmp:http">
              <data>{xdmp:quote(local:build-delete-stub())}</data>
           <headers>
             <content-type>text/xml</content-type>
           </headers>
        </options>)
) 
